plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'groovy'
}

group = 'com.jvmops'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '14'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
//	hibernateValidator = '6.1.5.Final'
	spockVersion = '1.3-groovy-2.5'
	testcontainersVersion = '1.14.3'
	testcontainersEmbeddedMongoVersion = '1.71'
	springCloudVersion = 'Hoxton.SR4'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
//	implementation "org.hibernate.validator:hibernate-validator:$hibernateValidator"
//	implementation "org.hibernate.validator:hibernate-validator-annotation-processor:$hibernateValidator"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation "org.spockframework:spock-core:$spockVersion"
	testImplementation "org.spockframework:spock-spring:$spockVersion"
	testImplementation'org.springframework.boot:spring-boot-starter-test'

	testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
	testImplementation "com.playtika.testcontainers:embedded-mongodb:$testcontainersEmbeddedMongoVersion"
	testImplementation "org.springframework.cloud:spring-cloud-starter"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()

	// extensive docker and spring logging
	testLogging.showStandardStreams = true

	// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html
	testLogging {
		events "passed", "skipped", "failed"
	}

	afterSuite { desc, result ->
		if (!desc.parent)
			println("${result.resultType} " +
					"(${result.testCount} tests, " +
					"${result.successfulTestCount} successes, " +
					"${result.failedTestCount} failures, " +
					"${result.skippedTestCount} skipped)")
	}
}
